#!/bin/sh
set -eu

DISTROS_DIR="${HOME}/.distros"
BACKUPS_DIR="${HOME}/.distros/.backup"

download_to_stdout() {
	if command -v curl >/dev/null; then
		curl -LkS -s "$@"
	elif command -v wget >/dev/null; then
		wget -O- --no-check-certificate -q "$@"
	else
		printf "%s: %s\n" "$(basename "$0")" "Cannot find curl or wget" >&2
		exit 1
	fi
}

choose_rootfs() {
	find "${DISTROS_DIR}" -maxdepth 1 -mindepth 1 -type d -not -name ".*" -exec basename {} \; | gum choose --header="Choose a rootfs:"
}

html_to_meta() {
	# grep -E "^<tr>" | grep -Eo 'href="/images/.+"' | sed 's/href=\"\/images\///g' | sed 's/\/\"$//g' | sed 's/\//;/g' | cut -d\; -f1-5
	grep -Eo "<tr><td>.+</td></tr>" | sed -E 's^<tr><td>(.+)</td><td>(.+)</td><td>(.+)</td><td>(.+)</td><td><a href="(.+)">(.+)</a></td><td>(.+)</td><td>(.+)</td><td>(.+)</td><td>(.+)</td></tr>^\1;\2;\3;\4;\6;\5^g'
}

meta_to_table() {
	local_arch=$(uname -m)
	case "${local_arch}" in
	aarch64) remote_arch=arm64 ;;
	armv7a) remote_arch=armhf ;;
	x86_64) remote_arch=amd64 ;;
	i686) remote_arch=i386 ;;
	*) remote_arch="${local_arch}" ;;
	esac

	index=0
	echo "DISTRO,RELEASE,ARCH,VARIANT,TIMESTAMP,REFERENCE"
	while IFS=';' read -r DISTRO RELEASE ARCH VARIANT TIMESTAMP REFERENCE; do
		if test "${remote_arch}" = "${ARCH}" && ! test "${VARIANT}" = cloud && ! test "${DISTRO}" = "nixos"; then
			echo "${DISTRO},${RELEASE},${ARCH},${VARIANT},${TIMESTAMP},${REFERENCE}"
			index=$((index + 1))
		fi
	done
}

command_install() {
	STR_INSTALL_FROM_FILE="Install from local file"
	lxc_mirror="$(
		gum choose \
			--header="Choose a LXC mirror:" \
			"${STR_INSTALL_FROM_FILE}" \
			https://images.linuxcontainers.org \
			https://mirrors.tuna.tsinghua.edu.cn/lxc-images \
			https://mirrors.cernet.edu.cn/lxc-images \
			https://mirrors.nju.edu.cn/lxc-images \
			https://mirrors.bfsu.edu.cn/lxc-images \
			https://mirror.lzu.edu.cn/lxc-images \
			https://mirror.nyist.edu.cn/lxc-images
	)"

	if ! test -d "${DISTROS_DIR}"; then
		mkdir -p "${DISTROS_DIR}"
	fi

	case "${lxc_mirror}" in
	"${STR_INSTALL_FROM_FILE}")
		if ! test -d "${BACKUPS_DIR}"; then
			mkdir -p "${BACKUPS_DIR}"
		fi

		file=$(gum file "${BACKUPS_DIR}")
		rootfs_name=$(gum input --placeholder="Input rootfs name.")
		case "${file}" in
		*.tar.gz)
			gzip -d <"${file}" | prootie install -v "${DISTROS_DIR}/${rootfs_name}"
			;;
		*.tar.xz)
			xz -d <"${file}" | prootie install -v "${DISTROS_DIR}/${rootfs_name}"
			;;
		esac
		;;
	*)
		dl_cmd="curl -SsLk"
		if ! command -v curl >/dev/null && command -v wget >/dev/null; then
			dl_cmd="wget -qO-"
		fi

		# selection=$(download_to_stdout "${lxc_mirror}/meta/1.0/index-user" | meta_to_table | gum table --widths=10,10,10,0,0,0 --height=10)
		selection=$(download_to_stdout "${lxc_mirror}" | html_to_meta | meta_to_table | gum table --widths=10,10,0,10,0,0 --height=10)
		if [ -z "${selection}" ]; then
			exit 1
		fi

		distro=$(echo "${selection}" | cut -d',' -f1)
		release=$(echo "${selection}" | cut -d',' -f2)
		arch=$(echo "${selection}" | cut -d',' -f3)
		variant=$(echo "${selection}" | cut -d',' -f4)
		timestamp=$(echo "${selection}" | cut -d',' -f5)

		archive_url=${lxc_mirror}/images/${distro}/${release}/${arch}/${variant}/${timestamp}/rootfs.tar.xz
		rootfs_default=${DISTROS_DIR}/${distro}-${release}-${variant}
		rootfs=$(gum input --header="Input rootfs:" --value="${rootfs_default}" --placeholder="Input rootfs")
		download_to_stdout "${archive_url}" | xz -d | prootie install -v "${rootfs}"

		case "${distro}" in
		ubuntu) touch "${rootfs}/root/.hushlogin" ;;
		voidlinux) sed -i "s^root:x:0:0:root:/root:/bin/sh^root:x:0:0:root:/root:/bin/bash^g" "${rootfs}/etc/passwd" ;;
		*) ;;
		esac

		if gum confirm "Login now?"; then
			prootie login "${rootfs}"
		fi
		;;
	esac
}

command_login() {
	rootfs="${DISTROS_DIR}/$(choose_rootfs)"
	prootie login "${rootfs}"
}

command_archive() {
	if ! test -d "${BACKUPS_DIR}"; then
		mkdir "${BACKUPS_DIR}"
	fi

	rootfs_name=$(choose_rootfs)
	# shellcheck disable=SC2046
	compression_tool=$(gum choose --header="Choose a compression tool:" $(
		for tool in gzip pigz xz; do
			if command -v ${tool} >/dev/null; then
				printf "%s " "${tool}"
			fi
		done
	))

	case "${compression_tool}" in
	gzip | pigz)
		output_file="${BACKUPS_DIR}/${rootfs_name}.tar.gz"
		output_file=$(gum input --header="Input output file name:" --value="${output_file}" --placeholder="Input output file name")
		prootie archive "${DISTROS_DIR}/${rootfs_name}" -v | "${compression_tool}" >"${output_file}"
		;;
	xz)
		output_file="${BACKUPS_DIR}/${rootfs_name}.tar.xz"
		output_file=$(gum input --header="Input output file name:" --value="${output_file}" --placeholder="Input output file name")
		prootie archive "${DISTROS_DIR}/${rootfs_name}" -v | xz -T0 >"${output_file}"
		;;
	*) ;;
	esac

	du -ahd0 "${output_file}"
}

main() {
	CMD_INSTALL="install"
	CMD_LOGIN="login"
	CMD_ARCHIVE="archive"
	CMD_EXIT="exit"
	if test $# -gt 0; then
		case "$1" in
		"${CMD_INSTALL}") command_install ;;
		"${CMD_LOGIN}") command_login ;;
		"${CMD_ARCHIVE}") command_archive ;;
		"${CMD_EXIT}") exit 0 ;;
		*) exit 1 ;;
		esac
	else
		selection=$(gum choose "${CMD_INSTALL}" "${CMD_LOGIN}" "${CMD_ARCHIVE}" "${CMD_EXIT}")
		if test ${selection+1}; then
			main "${selection}"
		else
			exit 1
		fi
	fi
}

main "$@"
